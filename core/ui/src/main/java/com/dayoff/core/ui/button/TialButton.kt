package com.dayoff.core.ui.buttonimport androidx.compose.foundation.BorderStrokeimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.sizeimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonColorsimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport com.airbnb.lottie.compose.LottieAnimationimport com.airbnb.lottie.compose.LottieCompositionSpecimport com.airbnb.lottie.compose.LottieConstantsimport com.airbnb.lottie.compose.animateLottieCompositionAsStateimport com.airbnb.lottie.compose.rememberLottieCompositionimport com.dayoff.designsystem.Rimport com.dayoff.designsystem.theme.LocalTialColorsimport com.dayoff.designsystem.theme.LocalTialShapesimport com.dayoff.designsystem.theme.LocalTialTypes/** *  Created by KyunghyunPark at 2025. 7. 5. *//** * Tial button * * @param modifier * @param text * @param isLoading * @param enabled * @param onClick * @receiver */@Composablefun TialButton(    modifier: Modifier = Modifier,    text: String,    isLoading: Boolean = false,    enabled: Boolean,    onClick: () -> Unit,) {    val color = LocalTialColors.current    val type = LocalTialTypes.current    val shape = LocalTialShapes.current    val composition by rememberLottieComposition(        spec = LottieCompositionSpec.RawRes(R.raw.lottie_progress_activate_brand600),        )    val progress by animateLottieCompositionAsState(composition = composition, iterations = LottieConstants.IterateForever)    Button(        modifier = modifier,        shape = shape.Full,        enabled = enabled,        contentPadding = PaddingValues(vertical = 18.dp, horizontal = 20.dp),        colors = ButtonColors(            containerColor =                if(isLoading) {                    color.button.brand.background.secondary                } else {                    color.button.brand.background.primary                },            contentColor = if(isLoading) {                color.button.brand.text.secondaryOn            } else {                color.button.brand.text.primaryOn            },            disabledContainerColor = color.button.brand.background.disabled,            disabledContentColor = color.button.brand.text.disabledOn,        ),        onClick = {            if (isLoading) return@Button            onClick()        }) {        if (isLoading) {            LottieAnimation(                composition = composition,                progress = { progress },                modifier = Modifier.size(size = 20.dp),            )            Spacer(modifier = Modifier.size(size = 4.dp))        }        Text(text = text, style = type.labelLarge)    }}/** * Tial outline button * * @param modifier * @param text * @param isLoading * @param enabled * @param onClick * @receiver */@Composablefun TialOutlineButton(    modifier: Modifier = Modifier,    text: String,    isLoading: Boolean = false,    enabled: Boolean,    onClick: () -> Unit,) {    val color = LocalTialColors.current    val type = LocalTialTypes.current    val shape = LocalTialShapes.current    val composition by rememberLottieComposition(        spec = LottieCompositionSpec.RawRes(R.raw.lottie_progress_activate_slate400),    )    val progress by animateLottieCompositionAsState(composition = composition, iterations = LottieConstants.IterateForever)    Button(        modifier = modifier,        shape = shape.Full,        enabled = enabled,//        contentPadding = PaddingValues(vertical = 18.dp, horizontal = 20.dp),        contentPadding = PaddingValues(vertical = 18.dp, horizontal = 35.dp),        colors = ButtonColors(            containerColor = if(isLoading) {                color.background.surface.secondary            } else {                color.background.base.white            },            contentColor = if(isLoading) {                color.text.surface.placeholder            } else {                color.text.surface.secondary            },            disabledContainerColor = color.background.disabled.primary,            disabledContentColor = color.text.disabled.primaryOn,        ),        border = if(enabled) {            BorderStroke(                width = 1.dp,                color = color.background.surface.tertiary,            )        } else {            null        },        onClick = {            if (isLoading) return@Button            onClick()        }) {        if (isLoading) {            LottieAnimation(                composition = composition,                progress = { progress },                modifier = Modifier.size(size = 20.dp),            )            Spacer(modifier = Modifier.size(size = 4.dp))        }        Text(text = text, style = type.labelLarge)    }}